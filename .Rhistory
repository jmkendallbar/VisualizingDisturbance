HR_data  <- read.csv(here("data","narwhal_HR.csv"))
library(here)
library(lubridate)
library(tidyr)
library(dplyr)
library(ggplot2)
HR_data  <- read.csv(here("data","narwhal_HR.csv"))
HR_data  <- read.csv(here("data","narwhal_HR.csv"))
# Depth_data <- read.csv(here("data","Glacier_Dep.csv"))
# Accel_data <- read.csv(here("data","Glacier_Ac.csv")) #Acceleration data is in 16Hz
# #all_data   <- read.csv(here("data","MA18_099_16A0746-Archive.csv"))
minHR <- min(HR_data$InHR)
idx <- match(minHR, HR_data$InHR)
minHR_R.Time <- HR_data$R.Time[idx]
minHR_Seconds <- HR_data$Seconds[idx]
#This shows how long the data set is.
print(HR_data$R.Time[nrow(HR_data)]-HR_data$R.Time[1])
paste("The lowest heartrate was",min(HR_data$InHR),"which occurred at", minHR_R.Time, "at", minHR_Seconds)
View(HR_data)
library(here)
library(lubridate)
library(tidyr)
library(dplyr)
library(ggplot2)
HR_data  <- read.csv(here("data","narwhal_HR.csv"))
# Depth_data <- read.csv(here("data","Glacier_Dep.csv"))
# Accel_data <- read.csv(here("data","Glacier_Ac.csv")) #Acceleration data is in 16Hz
# #all_data   <- read.csv(here("data","MA18_099_16A0746-Archive.csv"))
library(here)
library(lubridate)
library(tidyr)
library(dplyr)
library(ggplot2)
HR_data  <- read.csv(here("data","narwhal_HR.csv"))
# Depth_data <- read.csv(here("data","Glacier_Dep.csv"))
# Accel_data <- read.csv(here("data","Glacier_Ac.csv")) #Acceleration data is in 16Hz
# #all_data   <- read.csv(here("data","MA18_099_16A0746-Archive.csv"))
HR_data  <- read.csv(here("data","narwhal_HR.csv"))
# Depth_data <- read.csv(here("data","Glacier_Dep.csv"))
# Accel_data <- read.csv(here("data","Glacier_Ac.csv")) #Acceleration data is in 16Hz
# #all_data   <- read.csv(here("data","MA18_099_16A0746-Archive.csv"))
HR_data  <- read.csv(here("data","narwhal_HR.csv"))
# Depth_data <- read.csv(here("data","Glacier_Dep.csv"))
# Accel_data <- read.csv(here("data","Glacier_Ac.csv")) #Acceleration data is in 16Hz
# #all_data   <- read.csv(here("data","MA18_099_16A0746-Archive.csv"))
minHR <- min(HR_data$InHR)
idx <- match(minHR, HR_data$InHR)
minHR_R.Time <- HR_data$R.Time[idx]
minHR_Seconds <- HR_data$Seconds[idx]
#This shows how long the data set is.
print(HR_data$R.Time[nrow(HR_data)]-HR_data$R.Time[1])
paste("The lowest heartrate was",min(HR_data$InHR),"which occurred at", minHR_R.Time, "at", minHR_Seconds)
minHR <- min(HR_data$InHR)
idx <- match(minHR, HR_data$InHR)
minHR_R.Time <- HR_data$R.Time[idx]
minHR_Seconds <- HR_data$Seconds[idx]
#This shows how long the data set is.
print(HR_data$R.Time[nrow(HR_data)]-HR_data$R.Time[1])
paste("The lowest heartrate was",min(HR_data$InHR),"which occurred at", minHR_R.Time, "at", minHR_Seconds, "seconds.")
minHR <- min(HR_data$InHR)
idx <- match(minHR, HR_data$InHR)
minHR_R.Time <- HR_data$R.Time[idx]
minHR_Seconds <- HR_data$Seconds[idx]
#This shows how long the data set is.
print(HR_data$R.Time[nrow(HR_data)]-HR_data$R.Time[1])
paste("The lowest heartrate was",min(HR_data$InHR),"which occurred at", minHR_Seconds, "seconds.")
# Preview the dataset and the class types
head(HR_data,10)
startsec <- 0
endsec   <- 200
fs <- 25
HR_subset <- HR_data %>% filter(Seconds > startsec) %>% filter(Seconds<endsec)
for (i in 1:nrow(HR_subset)) {
HR_subset$Interval[i] <- HR_subset$Seconds[i+1] - HR_subset$Seconds[i]
}
HR_subset <- na.omit(HR_subset)
paste("Shortest interbeat interval is ", min(HR_subset$Interval))
paste("Longest interbeat interval is ", max(HR_subset$Interval))
HR_subset$Wait <- HR_subset$Interval - 0.30
#Write csv file - use this CSV to import annotations into EDF file
write.csv(HR_subset$Seconds, here("data", "HR_seconds_for_Python.csv"), sep=",")
write.csv(HR_subset$Interval, here("data", "HR_interval_for_Python.csv"), sep=",", col.names = TRUE, row.names = FALSE)
write.csv(HR_subset$Wait, here("data","HR_wait_for_Python.csv"), sep=",", col.names = TRUE, row.names = FALSE)
View(HR_subset)
HR_data  <- read.csv(here("data","narwhal_HR.csv"))
HR_data  <- read.csv(here("data","narwhal_HR.csv"))
minHR <- min(HR_data$InHR)
idx <- match(minHR, HR_data$InHR)
minHR_R.Time <- HR_data$R.Time[idx]
minHR_Seconds <- HR_data$Seconds[idx]
#This shows how long the data set is.
print(HR_data$R.Time[nrow(HR_data)]-HR_data$R.Time[1])
paste("The lowest heartrate was",min(HR_data$InHR),"which occurred at", minHR_Seconds, "seconds.")
# Preview the dataset and the class types
head(HR_data,10)
startsec <- 0
endsec   <- 200
fs <- 25
HR_subset <- HR_data %>% filter(Seconds > startsec) %>% filter(Seconds<endsec)
for (i in 1:nrow(HR_subset)) {
HR_subset$Interval[i] <- HR_subset$Seconds[i+1] - HR_subset$Seconds[i]
}
HR_subset <- na.omit(HR_subset)
paste("Shortest interbeat interval is ", min(HR_subset$Interval))
paste("Longest interbeat interval is ", max(HR_subset$Interval))
HR_subset$Wait <- HR_subset$Interval - 0.30
HR_subset$Wait[1] <- HR_subset$Seconds[1]
#Write csv file - use this CSV to import annotations into EDF file
write.csv(HR_subset$Seconds, here("data", "HR_seconds_for_Python.csv"), sep=",")
write.csv(HR_subset$Interval, here("data", "HR_interval_for_Python.csv"), sep=",", col.names = TRUE, row.names = FALSE)
write.csv(HR_subset$Wait, here("data","HR_wait_for_Python.csv"), sep=",", col.names = TRUE, row.names = FALSE)
HR_forPlot <- HR_data %>% filter(Seconds > startsec) %>% filter(Seconds<endsec)
plot1 <- ggplot(HR_forPlot, aes(x=Seconds,y=InHR))+
geom_line()+
theme_classic()
plot1+labs(
title = "Instananeous HR over time (bpm)",
x= "Time (seconds)",
y= "Instantaneous HR (bpm)",
caption = "Figure by Jessica Kendall-Bar"
)
